//
//  XMPPLoginManager.m
//  manpower
//
//  Created by WangShunzhou on 14-8-13.
//  Copyright (c) 2014年 WHZM. All rights reserved.
//

#import "XMPPConnnectionManager.h"
#import "RNEncryptor.h"
#import "RNDecryptor.h"
#import "XMPPManager.h"
#import "UIView+UIViewExt.h"
#import "AppDelegate.h"
#import "RLMyInfo.h"
#import "XMPPvCardTemp.h"
#import "JSONKit.h"
#import "AppDelegate.h"
#import "UserModel.h"
#import "FriendDataHelp.h"

@interface XMPPConnnectionManager (){
    __block XMPPManager *xmppManager;
    XMPPStream *xmppStream;
    UIViewController *currentVC;
    RLMyInfo *myInfo;
    BOOL loggedIn;
}

@end

@implementation XMPPConnnectionManager
DEFINE_SINGLETON_FOR_CLASS(XMPPConnnectionManager)

-(id)init{
    self = [super init];
    if (self) {
        xmppManager = [XMPPManager sharedInstance];
        xmppStream = xmppManager.xmppStream;
        [xmppStream addDelegate:self delegateQueue:dispatch_get_main_queue()];
        if (![xmppStream isConnected]) {
            XMPPJID *jid = xmppStream.myJID;
            if (jid == nil) {
                jid = [XMPPJID jidWithString:[NSString stringWithFormat:@"%@@%@/%@",@"",XMPP_HOST_DOMAIN,XMPP_HOST_RESOURCE]];
                [xmppStream setMyJID:jid];
            }
            [xmppManager connect];
        }
        myInfo = [RLMyInfo sharedRLMyInfo];
        [myInfo loadUserData];
        self.username = myInfo.username;
        self.password = myInfo.password;
    }
    return self;
}

-(UIViewController*)currentVC{
    currentVC = [[UIApplication sharedApplication] keyWindow].rootViewController;
    
    return currentVC;
}


#pragma mark - Public API
/**
 *  登陆
 *  
 *  @abstract 如果已经连接到XMPP服务器，直接认证。否则，先连接，连接成功后，再认证。
 *
 */
-(void)login{
    
    [[self currentVC].view hideAllHUD];
    [[self currentVC].view showHUD:@"正在连接服务器..."];
    if (![xmppManager connect] ) {
        DDLogVerbose(@"%@: %@", THIS_FILE, THIS_METHOD);
        [[self currentVC].view hideAllHUD];
        [[self currentVC].view showStringHUD:@"服务器断开连接，请重试..." second:2];
    } else if(xmppStream.isConnected){
        [[self currentVC].view hideAllHUD];
        [[self currentVC].view showHUD:@"正在认证..."];
        [self doAuthenticate];
    }

}

-(void)logOut{
    [xmppManager disconnect];
    [xmppManager.xmppRosterStorage clearAllUsersAndResourcesForXMPPStream:xmppManager.xmppStream];
    [FriendDataHelp sharedFriendDataHelp].groupList=nil;
    
    // 通知用户已经登出
    [[NSNotificationCenter defaultCenter] postNotificationName:NOFITICATION_LOG_OUT object:nil];
    _loginFlag = NO;
    loggedIn = NO;
    AppDelegate *appDelegate = (AppDelegate*)[UIApplication sharedApplication].delegate;
    [appDelegate changeToLogin];

}

#pragma mark - Private API

/**
 *  认证
 */
-(void)doAuthenticate{
    NSError *err = nil;
    [xmppStream authenticateWithPassword:_password error:&err];
    if (err) {
        DDLogError(@"%@", err);
    }
}

#pragma mark - XMPPStream Delegate

- (void)xmppStreamDidConnect:(XMPPStream *)sender
{
	DDLogVerbose(@"%@: %@", THIS_FILE, THIS_METHOD);
    
    if (_loginFlag) {
        [[self currentVC].view hideAllHUD];
        [[self currentVC].view showHUD:@"正在认证..."];
        
        [self doAuthenticate];
    }
}

- (void)xmppStreamDidDisconnect:(XMPPStream *)sender withError:(NSError *)error
{
	DDLogVerbose(@"%@: %@", THIS_FILE, THIS_METHOD);
    if (_loginFlag) {
        NSString *errString;
        switch ([error code]) {
            case 7: //服务器主动断开连接，有可能是账号在别处登陆。
                errString = @"服务器主动断开连接";
                // 跳转到登陆界面
                [(AppDelegate*)[[UIApplication sharedApplication] delegate] changeToLogin];
                loggedIn = NO;
                break;
            case 65: //No route to host
                errString = @"没有网络连接";
                break;
            case 51: //Network is unreachable
                errString = @"无法连接服务器";
                break;
            default:
                errString = @"连接中断";
                break;
        }
        [[self currentVC].view hideHUD];
        [[self currentVC].view showStringHUD:errString second:3];
        
        
        if (loggedIn && kReachability)
        {
            [xmppManager connect];
        }
    }
}

- (void)xmppStreamDidAuthenticate:(XMPPStream *)sender{
    
    // 换账号登陆时，更新Libaray中的文件。
    myInfo.username = self.username;
    myInfo.password = self.password;
    [myInfo saveUserData];  // 就算没有登陆成功也要保存密码
    // 为不同的人建立不同的数据库
    [MagicalRecord setupCoreDataStackWithStoreNamed:[myInfo.username stringByAppendingPathExtension:@"sqlite"]];
    
    // 从接口获取好友列表
    [xmppManager getFriendList];
    // 建立默认分组
    [xmppManager createDefaultGroup];
    
    /*保存用户登录账号*/
    NSMutableArray *arr = [NSMutableArray array];
    [arr addObject:self.username];
    [[UserModel sharedUserModel] updateUserList:arr];
    
    @weakify(self);
    [myInfo getUserInfoFromServer:^(BOOL success){
        if (success) {
            @strongify(self);
            [myInfo saveUserData];  // 保存用户信息
            
            // 进入所有群
            [[XMPPManager sharedInstance] joinAllRoom];
            // 关闭hud
            [[self currentVC].view hideAllHUD];
            // 跳转到主界面
            [(AppDelegate*)[[UIApplication sharedApplication] delegate] changeToRoot];
            
            dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(0.2 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{
                // 登陆后卡界面的根源在这里。在认证成功后马上上线有一定机率会卡界面(主线程阻塞，界面相应不到任何事件)。卡界面的情况在真机上尚未发现。
                [xmppManager goOnline];
            });
            loggedIn = YES;

        }else{
            // 关闭hud
            [[self currentVC].view hideAllHUD];
            [[self currentVC].view showStringHUD:@"获取数据出错" second:3];
            [self logOut];
        }
    }];
    

}

- (void)xmppStream:(XMPPStream *)sender didNotAuthenticate:(NSXMLElement *)error{
    [[self currentVC].view hideAllHUD];
    [[self currentVC].view showStringHUD:@"用户名/密码错误！" second:2];
}



#pragma mark - Read / Write user data
/**
 *  @abstract 读写本地存储用户账号、密码 上述隐私信息以加密文件的方式存储在本地。
 
-(void)loadUserData:(NSString*)filePath{
    // 存储在Library路径下，文件名为001.dat。不要取有意义的文件名。
    NSFileManager *fileManager = [NSFileManager defaultManager];
    NSDictionary *dic;
    if (![fileManager fileExistsAtPath:filePath]) {
        [fileManager createFileAtPath:filePath contents:nil attributes:nil];
    }
    NSData *data = [NSData dataWithContentsOfFile:filePath];
    
    NSError *err = nil;
    NSData *decryData = [RNDecryptor decryptData:data withSettings:kRNCryptorAES256Settings password:kCryptPwd error:&err];
    if (err) {
        NSLog(@"Decrypt error: %@", err);
    }else{
        dic = [decryData objectFromJSONData];
        self.username = [dic objectForKey:@"username"];
        self.password = [dic objectForKey:@"password"];
        
    }
    
}

-(void)saveUserData{
    NSError *err;
    NSDictionary *dic = @{@"username":_username,@"password":_password};
    NSData *encryData = [RNEncryptor encryptData:[dic JSONData] withSettings:kRNCryptorAES256Settings password:kCryptPwd error:&err];
    NSString *filePath = [NSHomeDirectory() stringByAppendingPathComponent:kCryptFilePath];
    [encryData writeToFile:filePath atomically:YES];
    if (err) {
        NSLog(@"Encrypt error: %@", err);
    }
}
 */
@end
