//
//  QBAssetsCollectionViewController.m
//  QBImagePickerController
//
//  Created by Tanaka Katsuma on 2013/12/31.
//  Copyright (c) 2013å¹´ Katsuma Tanaka. All rights reserved.
//

#import "QBAssetsCollectionViewController.h"

// Views
#import "QBAssetsCollectionViewCell.h"
#import "QBAssetsCollectionCameraCell.h"
#import "QBAssetsCollectionFooterView.h"
#import "QBAssetsBarButtonItem.h"
#import "MWPhotoBrowser.h"
#import <objc/runtime.h>

@interface QBAssetsCollectionViewController ()<QBAssetsCollectionCheckmarkViewDelegate, MWPhotoBrowserDelegate,UIImagePickerControllerDelegate>
{
    UIToolbar *toolbar;
}
@property (nonatomic, strong) NSMutableArray *assets;
@property (nonatomic, strong) NSArray *browserAssets;

@property (nonatomic, assign) NSInteger numberOfPhotos;
@property (nonatomic, assign) NSInteger numberOfVideos;

@end

static NSString *assetCellIdentifier = @"AssetsCell";
static NSString *cameraCellIdentifier = @"CameraCell";

@implementation QBAssetsCollectionViewController

- (instancetype)initWithCollectionViewLayout:(UICollectionViewLayout *)layout
{
    self = [super initWithCollectionViewLayout:layout];
    
    if (self) {
        
    }
    
    return self;
}

-(void)viewDidLoad{
    [super viewDidLoad];
    // View settings
    self.collectionView.backgroundColor = [UIColor whiteColor];
    // Register cell class
    [self.collectionView registerClass:[QBAssetsCollectionViewCell class]
            forCellWithReuseIdentifier:assetCellIdentifier];
    [self.collectionView registerClass:[QBAssetsCollectionCameraCell class] forCellWithReuseIdentifier:cameraCellIdentifier];
    [self.collectionView registerClass:[QBAssetsCollectionFooterView class]
            forSupplementaryViewOfKind:UICollectionElementKindSectionFooter
                   withReuseIdentifier:@"FooterView"];
    
    UIBarButtonItem *cancelButton = [[UIBarButtonItem alloc] initWithBarButtonSystemItem:UIBarButtonSystemItemCancel target:self.imagePickerController action:@selector(cancel:)];
    [self.navigationItem setRightBarButtonItem:cancelButton animated:NO];
    
    [self setupToolbarItems];
//    NSLog(@"%@",self.navigationController);

}

- (void)viewWillAppear:(BOOL)animated
{
    [super viewWillAppear:animated];
    
    // Scroll to bottom --- iOS 7 differences
    CGFloat topInset;
    if ([self respondsToSelector:@selector(setEdgesForExtendedLayout:)]) {
        topInset = ((self.edgesForExtendedLayout && UIRectEdgeTop) && (self.collectionView.contentInset.top == 0)) ? (20.0 + 44.0) : 0.0;
    } else {
        topInset = (self.collectionView.contentInset.top == 0) ? (20.0 + 44.0) : 0.0;
    }
    
    [self.collectionView setContentOffset:CGPointMake(0, self.collectionView.collectionViewLayout.collectionViewContentSize.height - self.collectionView.frame.size.height + topInset)
                                 animated:NO];
    
    // Validation
//    if (self.allowsMultipleSelection) {
//        self.navigationItem.rightBarButtonItem.enabled = [self validateNumberOfSelections:self.imagePickerController.selectedAssetURLs.count];
//    }
    [self.collectionView reloadData];
    [self.collectionView scrollToItemAtIndexPath:[NSIndexPath indexPathForRow:0 inSection:0] atScrollPosition:UICollectionViewScrollPositionTop animated:NO];
}

-(void)viewDidAppear:(BOOL)animated{
    [super viewDidAppear:animated];
//    [self.navigationController setToolbarHidden:NO animated:NO];
//    self.navigationController.toolbarHidden = NO;
}

-(void)viewWillDisappear:(BOOL)animated{
    [super viewWillDisappear:animated];
}

#pragma mark - Accessors

- (void)setFilterType:(QBImagePickerControllerFilterType)filterType
{
    _filterType = filterType;
    
    // Set assets filter
    [self.assetsGroup setAssetsFilter:ALAssetsFilterFromQBImagePickerControllerFilterType(self.filterType)];
}

- (void)setAssetsGroup:(ALAssetsGroup *)assetsGroup
{
    _assetsGroup = assetsGroup;
    
    // Set title
    self.title = [self.assetsGroup valueForProperty:ALAssetsGroupPropertyName];
    
    // Get the number of photos and videos
    [self.assetsGroup setAssetsFilter:[ALAssetsFilter allPhotos]];
    self.numberOfPhotos = self.assetsGroup.numberOfAssets;
    
    [self.assetsGroup setAssetsFilter:[ALAssetsFilter allVideos]];
    self.numberOfVideos = self.assetsGroup.numberOfAssets;
    
    // Set assets filter
    [self.assetsGroup setAssetsFilter:ALAssetsFilterFromQBImagePickerControllerFilterType(self.filterType)];
    
    // Load assets
    self.assets = [NSMutableArray array];
    
    __weak typeof(self) weakSelf = self;
    [self.assetsGroup enumerateAssetsUsingBlock:^(ALAsset *result, NSUInteger index, BOOL *stop) {
        if (result) {
            [weakSelf.assets insertObject:result atIndex:0];
//            [weakSelf.assets addObject:result];
        }
    }];
    
    // Update view
    if (self.navigationController) {
        [self.collectionView reloadData];
    }
}

- (void)setAllowsMultipleSelection:(BOOL)allowsMultipleSelection
{
//    self.collectionView.allowsMultipleSelection = allowsMultipleSelection;
    
    // Show/hide done button
//    if (allowsMultipleSelection) {
//        UIBarButtonItem *cancelButton = [[UIBarButtonItem alloc] initWithBarButtonSystemItem:UIBarButtonSystemItemCancel target:self.imagePickerController action:@selector(cancel:)];
//        [self.navigationItem setRightBarButtonItem:cancelButton animated:NO];
//    } else {
//        [self.navigationItem setRightBarButtonItem:nil animated:NO];
//    }
    
//    UIBarButtonItem *doneButton = [[UIBarButtonItem alloc] initWithBarButtonSystemItem:UIBarButtonSystemItemDone target:self action:@selector(done:)];
//    [self.navigationItem setRightBarButtonItem:doneButton animated:NO];
}

- (BOOL)allowsMultipleSelection
{
    return self.collectionView.allowsMultipleSelection;
}

#pragma mark - Private
-(void)setupToolbarItems{
    toolbar = [[UIToolbar alloc] initWithFrame:CGRectMake(0, self.view.frame.size.height - 88, 320, 44)];
    
    QBAssetsBarButtonItem *previewButtonItem;
    QBAssetsBarButtonItem *sendButtonItem;
    
    if (_imagePickerController.previewBarButtonItemNormalImage) {
        UIButton *previewButton = [UIButton buttonWithType:UIButtonTypeCustom];
        previewButton.frame = CGRectMake(0, 0, 60, 40);
//        [previewButton setBackgroundColor:UIColorFromRGB(0x000000)];
        [previewButton setImage:_imagePickerController.previewBarButtonItemNormalImage forState:UIControlStateNormal];
        if (_imagePickerController.previewBarButtonItemHighlightedImage) {
            [previewButton setImage:_imagePickerController.previewBarButtonItemHighlightedImage forState:UIControlStateHighlighted];
        }
        [previewButton addTarget:self action:@selector(preview:) forControlEvents:UIControlEventTouchUpInside];
        previewButtonItem = [[QBAssetsBarButtonItem alloc] initWithCustomView:previewButton];
    }else{
        previewButtonItem = [[QBAssetsBarButtonItem alloc] initWithTitle:NSLocalizedStringFromTable(@"preview",@"QBImagePickerController",nil) style:UIBarButtonItemStyleBordered target:self action:@selector(preview:)];
    }
    
    
    if (_imagePickerController.sendBarButtonItemNormalImage) {
        UIButton *sendButton = [UIButton buttonWithType:UIButtonTypeCustom];
        sendButton.frame = CGRectMake(0, 0, 60, 40);
//        [sendButton setBackgroundColor:UIColorFromRGB(0x000000)];
        [sendButton setImage:_imagePickerController.sendBarButtonItemNormalImage forState:UIControlStateNormal];
        if (_imagePickerController.sendBarButtonItemHighlightedImage) {
            [sendButton setImage:_imagePickerController.sendBarButtonItemHighlightedImage forState:UIControlStateHighlighted];
        }
        [sendButton addTarget:self action:@selector(done:) forControlEvents:UIControlEventTouchUpInside];
        sendButtonItem = [[QBAssetsBarButtonItem alloc] initWithCustomView:sendButton];
    }else{
        sendButtonItem = [[QBAssetsBarButtonItem alloc] initWithTitle:NSLocalizedStringFromTable(@"send",@"QBImagePickerController",nil) style:UIBarButtonItemStyleBordered target:self action:@selector(done:)];
    }
    sendButtonItem.shouldHideBadgeAtZero = YES;
    sendButtonItem.badgeBGColor = [UIColor colorWithRed:20.0/255.0 green:233.0/255.0 blue:100.0/255.0 alpha:1.0];
    
    UIBarButtonItem *spaceButtonItem = [[UIBarButtonItem alloc] initWithBarButtonSystemItem:UIBarButtonSystemItemFlexibleSpace target:nil action:nil];
    
    previewButtonItem.enabled = NO;
    sendButtonItem.enabled = NO;

    NSArray *toolbarItems = @[previewButtonItem, spaceButtonItem, sendButtonItem];
//    self.toolbarItems = toolbarItems;
//    
//    [self.navigationController.toolbar setBackgroundImage:[UIImage imageNamed:@"title_bg"] forToolbarPosition:UIBarPositionBottom barMetrics:UIBarMetricsDefault];

    [toolbar setItems:toolbarItems];
    if (_imagePickerController.toolbarBackgroundImage) {
        [toolbar setBackgroundImage:_imagePickerController.toolbarBackgroundImage forToolbarPosition:UIBarPositionBottom barMetrics:UIBarMetricsDefault];
    }
    [self.view addSubview:toolbar];
    [self updateToolbar];

    self.navigationController.toolbarHidden = YES;
}

#pragma mark - Actions

- (void)done:(id)sender
{
    // Delegate
    if (self.delegate && [self.delegate respondsToSelector:@selector(assetsCollectionViewControllerDidFinishSelection:)]) {
        [self.delegate assetsCollectionViewControllerDidFinishSelection:self];
    }
}

- (void)cancel:(id)sender{
//    self.navigationController.toolbarHidden = !self.navigationController.toolbarHidden;
}

- (void)preview:(id)sender{
    NSLog(@"%@",NSStringFromSelector(_cmd));
    self.browserAssets = [self.imagePickerController.selectedAssets copy];
    [self pushToPhotoBrowser:0];
}

- (BOOL)showCameraButton{
    return self.imagePickerController.showCameraButton && self.imagePickerController.cameraButtonImage;
}

#pragma mark - Managing Selection

- (void)selectAssetHavingURL:(NSURL *)URL
{
    for (NSInteger i = 0; i < self.assets.count; i++) {
        ALAsset *asset = [self.assets objectAtIndex:i];
        NSURL *assetURL = [asset valueForProperty:ALAssetPropertyAssetURL];
        
        if ([assetURL isEqual:URL]) {
            NSIndexPath *indexPath = [NSIndexPath indexPathForRow:i inSection:0];
            [self.collectionView selectItemAtIndexPath:indexPath animated:NO scrollPosition:UICollectionViewScrollPositionNone];
            
            return;
        }
    }
}


#pragma mark - Validating Selections

- (BOOL)validateNumberOfSelections:(NSUInteger)numberOfSelections
{
    NSUInteger minimumNumberOfSelection = MAX(1, self.minimumNumberOfSelection);
    BOOL qualifiesMinimumNumberOfSelection = (numberOfSelections >= minimumNumberOfSelection);
    
    BOOL qualifiesMaximumNumberOfSelection = YES;
    if (minimumNumberOfSelection <= self.maximumNumberOfSelection) {
        qualifiesMaximumNumberOfSelection = (numberOfSelections <= self.maximumNumberOfSelection);
    }
    
    return (qualifiesMinimumNumberOfSelection && qualifiesMaximumNumberOfSelection);
}

- (BOOL)validateMaximumNumberOfSelections:(NSUInteger)numberOfSelections
{
    NSUInteger minimumNumberOfSelection = MAX(1, self.minimumNumberOfSelection);
    
    if (minimumNumberOfSelection <= self.maximumNumberOfSelection) {
        return (numberOfSelections <= self.maximumNumberOfSelection);
    }
    
    return YES;
}


#pragma mark - UICollectionViewDataSource

- (NSInteger)numberOfSectionsInCollectionView:(UICollectionView *)collectionView
{
    return 1;
}

- (NSInteger)collectionView:(UICollectionView *)collectionView numberOfItemsInSection:(NSInteger)section
{
    NSInteger numberOfItems = self.assetsGroup.numberOfAssets;
    if ([self showCameraButton]) {
        numberOfItems++;
    }
    return numberOfItems;
}

- (UICollectionViewCell *)collectionView:(UICollectionView *)collectionView cellForItemAtIndexPath:(NSIndexPath *)indexPath
{
    UICollectionViewCell *cell;
    if (indexPath.row == 0 && [self showCameraButton]) {
        cell = [self configureCellForCamera:collectionView atIndexPath:indexPath];
    }else{
        cell = [self configureCellForAssets:collectionView atIndexPath:indexPath];
    }
    return cell;
}

- (CGSize)collectionView:(UICollectionView *)collectionView layout:(UICollectionViewLayout *)collectionViewLayout referenceSizeForFooterInSection:(NSInteger)section
{
    return CGSizeMake(collectionView.bounds.size.width, 46.0);
}

- (UICollectionReusableView *)collectionView:(UICollectionView *)collectionView viewForSupplementaryElementOfKind:(NSString *)kind atIndexPath:(NSIndexPath *)indexPath
{
    if (kind == UICollectionElementKindSectionFooter) {
        QBAssetsCollectionFooterView *footerView = [collectionView dequeueReusableSupplementaryViewOfKind:UICollectionElementKindSectionFooter
                                                                                      withReuseIdentifier:@"FooterView"
                                                                                             forIndexPath:indexPath];
        
        switch (self.filterType) {
            case QBImagePickerControllerFilterTypeNone:
                footerView.textLabel.text = [NSString stringWithFormat:NSLocalizedStringFromTable(@"format_photos_and_videos",
                                                                                                  @"QBImagePickerController",
                                                                                                  nil),
                                             self.numberOfPhotos,
                                             self.numberOfVideos
                                             ];
                break;
                
            case QBImagePickerControllerFilterTypePhotos:
                footerView.textLabel.text = [NSString stringWithFormat:NSLocalizedStringFromTable(@"format_photos",
                                                                                                  @"QBImagePickerController",
                                                                                                  nil),
                                             self.numberOfPhotos
                                             ];
                break;
                
            case QBImagePickerControllerFilterTypeVideos:
                footerView.textLabel.text = [NSString stringWithFormat:NSLocalizedStringFromTable(@"format_videos",
                                                                                                  @"QBImagePickerController",
                                                                                                  nil),
                                             self.numberOfVideos
                                             ];
                break;
        }
        
        return footerView;
    }
    
    return nil;
}

#pragma mark - ConfigureCell
-(UICollectionViewCell*)configureCellForAssets:(UICollectionView*)collectionView atIndexPath:(NSIndexPath*)indexPath{
    NSUInteger index = [self showCameraButton] ? indexPath.row - 1 : indexPath.row;
    QBAssetsCollectionViewCell *cell = [collectionView dequeueReusableCellWithReuseIdentifier:assetCellIdentifier forIndexPath:indexPath];
    object_setClass(cell, [QBAssetsCollectionViewCell class]);
    cell.showsOverlayViewWhenSelected = self.allowsMultipleSelection;
    cell.checkmarkView.delegate = self;
    cell.collectionViewController = self;
    ALAsset *asset = [self.assets objectAtIndex:index];
    cell.asset = asset;
    return cell;
}

-(UICollectionViewCell*)configureCellForCamera:(UICollectionView*)collectionView atIndexPath:(NSIndexPath*)indexPath{
    QBAssetsCollectionCameraCell *cell = [collectionView dequeueReusableCellWithReuseIdentifier:cameraCellIdentifier forIndexPath:indexPath];
    cell.imageView.image = self.imagePickerController.cameraButtonImage;
    return cell;
}

#pragma mark - UICollectionViewDelegateFlowLayout

- (CGSize)collectionView:(UICollectionView *)collectionView layout:(UICollectionViewLayout *)collectionViewLayout sizeForItemAtIndexPath:(NSIndexPath *)indexPath
{
    return CGSizeMake(77.5, 77.5);
}

- (UIEdgeInsets)collectionView:(UICollectionView *)collectionView layout:(UICollectionViewLayout*)collectionViewLayout insetForSectionAtIndex:(NSInteger)section
{
    return UIEdgeInsetsMake(2, 2, 2, 2);
}

//- (BOOL)collectionView:(UICollectionView *)collectionView shouldSelectItemAtIndexPath:(NSIndexPath *)indexPath
//{
//    return [self validateMaximumNumberOfSelections:(self.imagePickerController.selectedAssetURLs.count + 1)];
//}

- (void)collectionView:(UICollectionView *)collectionView didSelectItemAtIndexPath:(NSIndexPath *)indexPath
{
    if ( indexPath.row == 0 && [self showCameraButton]) {
        [self cameraButtonClicked:nil];
    } else {
        NSUInteger index  = indexPath.row;
        if ([self showCameraButton]) {
            index--;
        }
        self.browserAssets = self.assets;
        [self pushToPhotoBrowser:index];
    }
}

- (void)collectionView:(UICollectionView *)collectionView didDeselectItemAtIndexPath:(NSIndexPath *)indexPath
{

}
#pragma mark - Actions
-(void)pushToPhotoBrowser:(NSUInteger) currentIndex{
    MWPhotoBrowser *browser = [[MWPhotoBrowser alloc] initWithDelegate:self];
    [browser setCurrentPhotoIndex:currentIndex];
    browser.displayActionButton = YES;
    browser.collectionViewController = self;
    browser.displaySelectionButtons = NO;
    
#if __IPHONE_OS_VERSION_MIN_REQUIRED < __IPHONE_7_0
    browser.wantsFullScreenLayout = YES;
#endif
    
    [self.navigationController pushViewController:browser animated:YES];
}

-(void)updateToolbar{
    BOOL enable = [self validateNumberOfSelections:(self.imagePickerController.selectedAssetURLs.count)];
    [toolbar.items[2] setEnabled:enable];
    [toolbar.items[0] setEnabled:enable];
    __block QBAssetsBarButtonItem *sendBBI = toolbar.items[2];
    sendBBI.badgeOriginX = 1;
    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(0.3 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{
        sendBBI.badgeValue = [NSString stringWithFormat:@"%d",[self.imagePickerController.selectedAssetURLs count]];
    });
    
}

-(IBAction)cameraButtonClicked:(id)sender{
	DDLogVerbose(@"%@: %@", THIS_FILE, THIS_METHOD);
    UIImagePickerControllerSourceType sourceType;
    sourceType = UIImagePickerControllerSourceTypeCamera;
    NSArray *arr = [UIImagePickerController availableMediaTypesForSourceType:sourceType];
    if ( arr ) {
        [self showImagePicker:sourceType];
    }
}

-(void)showImagePicker:(UIImagePickerControllerSourceType)sourceType{
    UIImagePickerController *imagePicker = [[UIImagePickerController alloc] init];
    imagePicker.delegate = self;
    imagePicker.sourceType = sourceType;
    [self presentViewController:imagePicker animated:YES completion:^(){}];
}

#pragma mark - QBAssetsCollectionCheckmarkViewDelegate
-(BOOL)checkmarkViewShouldCheck:(QBAssetsCollectionCheckmarkView *)checkmarkView{
//    NSURL *assetURL = [checkmarkView.assetCollectionCell.asset valueForProperty:ALAssetPropertyAssetURL];
//    if ([self.imagePickerController.selectedAssetURLs containsObject:assetURL]) {
//        return NO;
//    }
//    if (self.allowsMultipleSelection){
        return [self validateNumberOfSelections:(self.imagePickerController.selectedAssetURLs.count + 1)];
//    }
//    return YES;
}

-(void)checkmarkViewDidCheck:(QBAssetsCollectionCheckmarkView *)checkmarkView{
    if (self.delegate && [self.delegate respondsToSelector:@selector(assetsCollectionViewController:didSelectAsset:)]) {
        [self.delegate assetsCollectionViewController:self didSelectAsset:checkmarkView.assetCollectionCell.asset];
    }

    [self updateToolbar];
}

-(void)checkmarkViewDidUncheck:(QBAssetsCollectionCheckmarkView *)checkmarkView{
    // Delegate
    if (self.delegate && [self.delegate respondsToSelector:@selector(assetsCollectionViewController:didDeselectAsset:)]) {
        [self.delegate assetsCollectionViewController:self didDeselectAsset:checkmarkView.assetCollectionCell.asset];
    }
    [self updateToolbar];
}

#pragma mark - PhotoBrowserDelegate
- (NSUInteger)numberOfPhotosInPhotoBrowser:(MWPhotoBrowser *)photoBrowser{
    return [self.browserAssets count];
}
- (id <MWPhoto>)photoBrowser:(MWPhotoBrowser *)photoBrowser photoAtIndex:(NSUInteger)index{
    ALAsset *asset = [self.browserAssets objectAtIndex:index];
    UIImage *image = [UIImage imageWithCGImage:[[asset defaultRepresentation] fullResolutionImage]];
    MWPhoto *photo = [MWPhoto photoWithImage:image];
    photo.asset = asset;
    
    return photo;
}

#pragma mark - Camera delegate
-(void)imagePickerControllerDidCancel:(UIImagePickerController *)picker{
    [picker dismissViewControllerAnimated:YES completion:NULL];
}

-(void)imagePickerController:(UIImagePickerController *)picker didFinishPickingMediaWithInfo:(NSDictionary *)info{
    /*
    NSURL *assetURL = [info objectForKey:UIImagePickerControllerReferenceURL];
    ALAssetsLibrary *assetsLibrary = [[ALAssetsLibrary alloc] init];
    __weak typeof (self) weakSelf = self;
    [assetsLibrary assetForURL:assetURL resultBlock:^(ALAsset *asset) {
        // Delegate
        if (weakSelf.imagePickerController.delegate && [weakSelf.imagePickerController.delegate respondsToSelector:@selector(imagePickerController:didSelectAsset:)]) {
            [weakSelf.imagePickerController.delegate imagePickerController:weakSelf.imagePickerController didSelectAsset:asset];
        }
    } failureBlock:^(NSError *error) {
        NSLog(@"Error: %@", [error localizedDescription]);
    }];
    */
    UIImage *image = [info objectForKey:UIImagePickerControllerOriginalImage];
    [self.imagePickerController.delegate imagePickerController:self.imagePickerController didTakePhoto:image];
}
@end
