//
//  RLMyInfoHeaderView.m
//  manpower
//
//  Created by WangShunzhou on 14-9-12.
//  Copyright (c) 2014年 WHZM. All rights reserved.
//

#import "RLMyInfoHeaderView.h"
#import "VPImageCropperVC.h"
#import "IMMessageHelper.h"
#import "UIImage+Resize.h"
#import "RLMyInfo.h"
#import <objc/runtime.h>
#import <MobileCoreServices/MobileCoreServices.h>
#import "XMPPManager.h"
#import "UIView+Border.h"

typedef NS_ENUM(NSInteger, ChangeImageType){
    ChangeImageTypePhoto,
    ChangeImageTypeBackground
};

static void *kPhotoActionSheetKey = "kPhotoActionSheetKey";
//static void *kGenderActionSheetKey = "kGenderActionSheetKey";
static void *kCurrentActionSheetKey;

static CGFloat kCropMaxWidth = 640.0f;

@interface RLMyInfoHeaderView()<UIImagePickerControllerDelegate,UINavigationControllerDelegate, VPImageCropperDelegate>{
    RLMyInfo *myInfo;
    ChangeImageType changeImageType;
    
}
@property(nonatomic, assign) UIViewController *viewController;
@property(nonatomic, assign) BOOL photoChangeable;
@property(nonatomic, assign) BOOL backgroundChangeable;
@property(nonatomic, assign) BOOL nameChangeable;

@property(nonatomic, strong) NSString* title;
@property(nonatomic, strong) NSString* subtitle;

@end

@implementation RLMyInfoHeaderView

+ (RLMyInfoHeaderView*)headerViewWithTitle:(NSString*)title withSubtitle:(NSString*)subtitle{
    return [RLMyInfoHeaderView headerViewWithViewController:nil withPhotoChangeable:YES withBackgroundChangeable:NO withNameChangeable:NO withTitle:title withSubtitle:subtitle];
}

+ (RLMyInfoHeaderView*)headerView{
    return [RLMyInfoHeaderView headerViewWithViewController:nil withPhotoChangeable:YES withBackgroundChangeable:NO withNameChangeable:NO withTitle:nil withSubtitle:nil];
}

+ (RLMyInfoHeaderView*)headerViewWithViewController:(UIViewController*)viewController{
    return [RLMyInfoHeaderView headerViewWithViewController:viewController withPhotoChangeable:YES withBackgroundChangeable:YES withNameChangeable:YES withTitle:nil withSubtitle:nil];
}

+ (RLMyInfoHeaderView*)headerViewWithViewController:(UIViewController *)viewController
                                withPhotoChangeable:(BOOL)photoChangeable
                           withBackgroundChangeable:(BOOL)backgroundChangeable
                                 withNameChangeable:(BOOL)nameChangeable
                                          withTitle:(NSString*)title
                                       withSubtitle:(NSString*)subtitle
{
    NSArray* nibs = [[NSBundle mainBundle] loadNibNamed:@"RLMyInfoHeaderView" owner:self options:nil];
    RLMyInfoHeaderView *headerView = nil;
    if ([nibs count]) {
        headerView = [nibs objectAtIndex:0];
        headerView.viewController = viewController;
        headerView.photoChangeable = photoChangeable;
        headerView.backgroundChangeable = backgroundChangeable;
        headerView.nameChangeable = nameChangeable;
        headerView.title = title;
        headerView.subtitle = subtitle;
        [headerView setupHeaderView];
    }
  
    return headerView;
}

#pragma mark - Setup
-(void)setupHeaderView{
    myInfo = [RLMyInfo sharedRLMyInfo];
    
    /*
    // 如果需要下载头像，下载头像到本地
    if (myInfo.shouldChangePhoto && _photoChangeable) {
        [myInfo downloadPhotoWithSuccess:NULL failure:NULL];
    }
    // 下载背景图
    if (myInfo.shouldChangeBackground && _backgroundChangeable) {
        [myInfo downloadBackgroundWithSuccess:NULL failure:NULL];
    }*/
    
    // 设置头像
    self.photoIV.userInteractionEnabled = YES;
    self.backgroundIV.userInteractionEnabled = YES;
    
    // 设置文本
    self.titleTextField.text = self.title ? self.title : myInfo.name;
    self.subtitleLabel.text = self.subtitle ? self.subtitle : [NSString stringWithFormat:@"ID: %@",myInfo.username];
    
    // 点击头像更改
    if (self.photoChangeable) {
        UITapGestureRecognizer *photoImageViewTapGesture = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(changePhoto)];
        [self.photoIV addGestureRecognizer:photoImageViewTapGesture];
    }
    
    if (self.backgroundChangeable) {
        // 点击背景图更改
        UITapGestureRecognizer *backgroundImageViewTapGesture = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(changeBackground)];
        [self.backgroundIV addGestureRecognizer:backgroundImageViewTapGesture];
    }
    
    self.titleTextField.enabled = self.nameChangeable;

    // 点击其它地方释放名称编辑区域焦点
    UITapGestureRecognizer *headerViewTapGesture = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(headerViewTapped:)];
    [self addGestureRecognizer:headerViewTapGesture];
    [self addBottomBorderWithColor:UIColorFromRGB(0xcccccc) andWidth:1.0];
}


#pragma mark - Action
-(void)changePhotoWithImage:(UIImage *)image
{
    NSString *filename = [IMMessageHelper generateUUID];
    NSString *fullPath = [APP_TMP_DIR_PATH stringByAppendingPathComponent:filename];
    if ([IMMessageHelper saveImage:image withFullFilePath:fullPath]) {
        myInfo.localPhoto = fullPath;
        [myInfo updatePhoto];
    }
    
}

-(void)changeBackgroundWithImage:(UIImage *)image
{
    NSString *filename = [IMMessageHelper generateUUID];
    NSString *fullPath = [APP_TMP_DIR_PATH stringByAppendingPathComponent:filename];
    if ([IMMessageHelper saveImage:image withFullFilePath:fullPath]) {
        myInfo.localBackground = fullPath;
        [myInfo updateBackground];
    }
    
}


-(void)changePhoto{
    changeImageType = ChangeImageTypePhoto;
    [self changeImage];
}

-(void)changeBackground{
    if ([self.titleTextField isFirstResponder]) {
        [self headerViewTapped:nil];
    }else{
        changeImageType = ChangeImageTypeBackground;
        [self changeImage];
    }
}

-(void)changeImage
{
    NSString *title;
    switch (changeImageType) {
        case ChangeImageTypePhoto:
            title = @"设置头像";
            break;
        case ChangeImageTypeBackground:
        default:
            title = @"设置背景图";
            break;
    }
    IBActionSheet *actionSheet = [[IBActionSheet alloc] initWithTitle:title delegate:self cancelButtonTitle:@"取消" destructiveButtonTitle:nil otherButtonTitles:@"拍照", @"从相册选择照片" , nil];
    void (^photoClickBlock)(NSInteger) = ^(NSInteger buttonIndex){
        if (buttonIndex == 0) {
            // 拍照
            if ([self isCameraAvailable] && [self doesCameraSupportTakingPhotos]) {
                UIImagePickerController *controller = [[UIImagePickerController alloc] init];
                controller.sourceType = UIImagePickerControllerSourceTypeCamera;
                if ([self isFrontCameraAvailable]) {
                    controller.cameraDevice = UIImagePickerControllerCameraDeviceFront;
                }
                NSMutableArray *mediaTypes = [[NSMutableArray alloc] init];
                [mediaTypes addObject:(__bridge NSString *)kUTTypeImage];
                controller.mediaTypes = mediaTypes;
                controller.delegate = self;
                [self.viewController presentViewController:controller
                                   animated:YES
                                 completion:NULL];
            }
            
        } else if (buttonIndex == 1) {
            // 从相册中选取
            if ([self isPhotoLibraryAvailable]) {
                UIImagePickerController *controller = [[UIImagePickerController alloc] init];
                controller.sourceType = UIImagePickerControllerSourceTypePhotoLibrary;
                NSMutableArray *mediaTypes = [[NSMutableArray alloc] init];
                [mediaTypes addObject:(__bridge NSString *)kUTTypeImage];
                controller.mediaTypes = mediaTypes;
                controller.delegate = self;
                [self.viewController presentViewController:controller
                                   animated:YES
                                 completion:NULL];
            }
        }
        
    };
    objc_setAssociatedObject(actionSheet, kPhotoActionSheetKey, photoClickBlock, OBJC_ASSOCIATION_COPY);
    kCurrentActionSheetKey = kPhotoActionSheetKey;
    [actionSheet showInView:self.viewController.view];
    
    
}

#pragma mark - Actionsheet delegate
-(void)actionSheet:(IBActionSheet *)actionSheet clickedButtonAtIndex:(NSInteger)buttonIndex{
    void(^block)(NSInteger) = objc_getAssociatedObject(actionSheet, kCurrentActionSheetKey);
    block(buttonIndex);
}

#pragma mark VPImageCropperDelegate
- (void)imageCropper:(VPImageCropperVC *)cropperViewController didFinished:(UIImage *)editedImage {
    if (changeImageType == ChangeImageTypePhoto) {
        editedImage = [editedImage imageByScalingWithMaxWidth:kPhotoSizeWidth];
        [self changePhotoWithImage:editedImage];
        [self.photoIV setImage:editedImage];
    }else{
        [self changeBackgroundWithImage:editedImage];
        [self.backgroundIV setImage:editedImage];
    }
    
    [cropperViewController dismissViewControllerAnimated:YES completion:NULL];
}

- (void)imageCropperDidCancel:(VPImageCropperVC *)cropperViewController {
    [cropperViewController dismissViewControllerAnimated:YES completion:^{
    }];
}

#pragma mark - UIImagePickerControllerDelegate
- (void)imagePickerController:(UIImagePickerController *)picker didFinishPickingMediaWithInfo:(NSDictionary *)info {
    [picker dismissViewControllerAnimated:YES completion:^() {
        UIImage *portraitImg = [info objectForKey:@"UIImagePickerControllerOriginalImage"];
        portraitImg = [self imageByScalingToMaxSize:portraitImg withMaxWidth:kCropMaxWidth];
        // 裁剪
        VPImageCropperVC *imgEditorVC = [[VPImageCropperVC alloc] initWithImage:portraitImg cropFrame:CGRectMake(0, 80.0f, self.viewController.view.frame.size.width, self.viewController.view.frame.size.width) limitScaleRatio:3.0];
        imgEditorVC.delegate = self;
        [self.viewController presentViewController:imgEditorVC animated:YES completion:NULL];
    }];
}

- (void)imagePickerControllerDidCancel:(UIImagePickerController *)picker {
    [picker dismissViewControllerAnimated:YES completion:^(){
    }];
}


#pragma mark camera utility
- (BOOL) isCameraAvailable{
    return [UIImagePickerController isSourceTypeAvailable:UIImagePickerControllerSourceTypeCamera];
}

- (BOOL) isRearCameraAvailable{
    return [UIImagePickerController isCameraDeviceAvailable:UIImagePickerControllerCameraDeviceRear];
}

- (BOOL) isFrontCameraAvailable {
    return [UIImagePickerController isCameraDeviceAvailable:UIImagePickerControllerCameraDeviceFront];
}

- (BOOL) doesCameraSupportTakingPhotos {
    return [self cameraSupportsMedia:(__bridge NSString *)kUTTypeImage sourceType:UIImagePickerControllerSourceTypeCamera];
}

- (BOOL) isPhotoLibraryAvailable{
    return [UIImagePickerController isSourceTypeAvailable:
            UIImagePickerControllerSourceTypePhotoLibrary];
}
- (BOOL) canUserPickVideosFromPhotoLibrary{
    return [self cameraSupportsMedia:(__bridge NSString *)kUTTypeMovie sourceType:UIImagePickerControllerSourceTypePhotoLibrary];
}
- (BOOL) canUserPickPhotosFromPhotoLibrary{
    return [self cameraSupportsMedia:(__bridge NSString *)kUTTypeImage sourceType:UIImagePickerControllerSourceTypePhotoLibrary];
}

- (BOOL) cameraSupportsMedia:(NSString *)paramMediaType sourceType:(UIImagePickerControllerSourceType)paramSourceType{
    __block BOOL result = NO;
    if ([paramMediaType length] == 0) {
        return NO;
    }
    NSArray *availableMediaTypes = [UIImagePickerController availableMediaTypesForSourceType:paramSourceType];
    [availableMediaTypes enumerateObjectsUsingBlock: ^(id obj, NSUInteger idx, BOOL *stop) {
        NSString *mediaType = (NSString *)obj;
        if ([mediaType isEqualToString:paramMediaType]){
            result = YES;
            *stop= YES;
        }
    }];
    return result;
}

#pragma mark image scale utility
- (UIImage *)imageByScalingToMaxSize:(UIImage *)sourceImage withMaxWidth:(CGFloat)maxWidth{
    if (sourceImage.size.width < maxWidth) return sourceImage;
    CGFloat btWidth = 0.0f;
    CGFloat btHeight = 0.0f;
    if (sourceImage.size.width > sourceImage.size.height) {
        btHeight = maxWidth;
        btWidth = sourceImage.size.width * (maxWidth / sourceImage.size.height);
    } else {
        btWidth = maxWidth;
        btHeight = sourceImage.size.height * (maxWidth / sourceImage.size.width);
    }
    CGSize targetSize = CGSizeMake(btWidth, btHeight);
    return [self imageByScalingAndCroppingForSourceImage:sourceImage targetSize:targetSize];
}

- (UIImage *)imageByScalingAndCroppingForSourceImage:(UIImage *)sourceImage targetSize:(CGSize)targetSize {
    UIImage *newImage = nil;
    CGSize imageSize = sourceImage.size;
    CGFloat width = imageSize.width;
    CGFloat height = imageSize.height;
    CGFloat targetWidth = targetSize.width;
    CGFloat targetHeight = targetSize.height;
    CGFloat scaleFactor = 0.0;
    CGFloat scaledWidth = targetWidth;
    CGFloat scaledHeight = targetHeight;
    CGPoint thumbnailPoint = CGPointMake(0.0,0.0);
    if (CGSizeEqualToSize(imageSize, targetSize) == NO)
    {
        CGFloat widthFactor = targetWidth / width;
        CGFloat heightFactor = targetHeight / height;
        
        if (widthFactor > heightFactor)
            scaleFactor = widthFactor; // scale to fit height
        else
            scaleFactor = heightFactor; // scale to fit width
        scaledWidth  = width * scaleFactor;
        scaledHeight = height * scaleFactor;
        
        // center the image
        if (widthFactor > heightFactor)
        {
            thumbnailPoint.y = (targetHeight - scaledHeight) * 0.5;
        }
        else
            if (widthFactor < heightFactor)
            {
                thumbnailPoint.x = (targetWidth - scaledWidth) * 0.5;
            }
    }
    UIGraphicsBeginImageContext(targetSize); // this will crop
    CGRect thumbnailRect = CGRectZero;
    thumbnailRect.origin = thumbnailPoint;
    thumbnailRect.size.width  = scaledWidth;
    thumbnailRect.size.height = scaledHeight;
    
    [sourceImage drawInRect:thumbnailRect];
    
    newImage = UIGraphicsGetImageFromCurrentImageContext();
    if(newImage == nil) DDLogInfo(@"could not scale image");
    
    //pop the context to get back to the default
    UIGraphicsEndImageContext();
    return newImage;
}

#pragma mark - Header View Tap Gesture
-(void)headerViewTapped:(UITapGestureRecognizer*) tapGestureRecognizer{
    if ([self.titleTextField isFirstResponder]) {
        [self.titleTextField resignFirstResponder];
        @weakify(self);
        if (self.titleTextField.text.length > 0 && ![self.titleTextField.text isEqualToString:myInfo.name]) {
            [myInfo updateInfoWithSuccess:^(id json){
                @strongify(self);
                [[XMPPManager sharedInstance] changeNicknameInRooms:self.titleTextField.text withOldName:myInfo.name];
                myInfo.name = self.titleTextField.text;
            } failure:NULL];
        }else{
            self.titleTextField.text = myInfo.name;
        }
    }
}


@end
